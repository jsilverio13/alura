# -*- coding: utf-8 -*-
"""pandas-io.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vQ7jdH6w86Y2Ngfp2HPc81OwOq3Cs8M_

# **Criando os nomes**
"""

import pandas as pd

nomes_m = pd.read_json("https://servicodados.ibge.gov.br/api/v1/censos/nomes/ranking?qtd=200&sexo=m")
nomes_f = pd.read_json("https://servicodados.ibge.gov.br/api/v1/censos/nomes/ranking?qtd=200&sexo=f")

nomes_f

nomes_m

print(f"Quantidade de nomes: {str(len(nomes_f) + len(nomes_m))}")

frames = [nomes_f, nomes_m]

pd.concat(frames)

frames

nomes = pd.concat(frames)['nome'].to_frame()

nomes.sample(5)



"""# **Incluindo ID dos alunos**"""

import numpy as np

np.random.seed(123)

total_alunos = len(nomes)
total_alunos

nomes['id_aluno'] = np.random.permutation(total_alunos) + 1

nomes.sample(10)

dominios = ['@dominiodoemail.com.br', '@servicodoemail.com']
nomes['dominio'] = np.random.choice(dominios, total_alunos)

nomes

nomes['email'] = nomes.nome.str.cat(nomes.dominio).str.lower()

nomes.sample(5)



"""# **Criando a tabela Cursos**"""

!pip3 install html5lib
!pip3 install lxml

import html5lib

url = 'https://tabela-cursos.herokuapp.com/index.html'
cursos = pd.read_html(url)

cursos

type(cursos)

cursos[0]

cursos = cursos[0]

type(cursos)

cursos.head(5)



"""# **Alterando o index de cursos**"""

cursos = cursos.rename(columns={'Nome do curso': 'nome_do_curso'})

cursos.head(3)

cursos['id'] = cursos.index + 1

cursos

cursos.set_index('id')

cursos = cursos.set_index('id')

cursos.head(5)

"""# **Matriculando os alunos nos cursos**"""

nomes.sample(10)

nomes['matriculas'] = np.ceil(np.random.exponential(size=total_alunos) * 1.5).astype(int)
nomes.sample(5)

nomes.matriculas.describe()

import seaborn as sns

sns.distplot(nomes.matriculas)

nomes.matriculas.value_counts()

"""# **Selecionando Cursos**"""

nomes.sample(5)

todas_matriculas = []

x = np.random.rand(20)

prob = x / sum(x)

prob

for index, row in nomes.iterrows():
  id = row.id_aluno
  matriculas = row.matriculas
  for i in range(matriculas):
    mat = [id, np.random.choice(cursos.index, p = prob)]
    todas_matriculas.append(mat)

matriculas = pd.DataFrame(todas_matriculas, columns = ['id_aluno', 'id_curso'])
matriculas.head()

matriculas.groupby('id_curso').count().join(cursos['nome_do_curso'])

matriculas.groupby('id_curso').count().join(cursos['nome_do_curso']).rename(columns={'id_aluno':'quantidade_de_alunos'})

nomes.sample(3)

cursos.head()

matriculas.head()

matriculas_por_cursos = matriculas.groupby('id_curso').count().join(cursos['nome_do_curso']).rename(columns={'id_aluno':'quantidade_de_alunos'})

matriculas_por_cursos

"""#**Saída em diferentes formatos**"""

matriculas_por_cursos.head()

matriculas_por_cursos.to_csv('matriculas_por_curso.csv', index=False)

pd.read_csv('matriculas_por_curso.csv')

matriculas_json = matriculas_por_cursos.to_json()

matriculas_json

matriculas_html = matriculas_por_cursos.to_html()

matriculas_html

"""# **Criando o banco SQL**"""

!pip install sqlalchemy

from sqlalchemy import create_engine, MetaData, Table

engine = create_engine('sqlite:///:memory:')

engine

type(engine)

matriculas_por_cursos.head(3)

matriculas_por_cursos.to_sql('matriculas', engine)

print(engine.table_names())

"""# **Buscando do banco SQL**"""

query = 'select * from matriculas where quantidade_de_alunos < 20'

pd.read_sql(query, engine)

muitas_matriculas = pd.read_sql_table('matriculas', engine, columns=['nome_do_curso', 'quantidade_de_alunos'])

muitas_matriculas

muitas_matriculas = muitas_matriculas.query('quantidade_de_alunos > 70')

muitas_matriculas

"""# **Escrevendo no banco**"""

muitas_matriculas.to_sql('muitas_matriculas', con=engine)

print(engine.table_names())



"""#**Nomes dos alunos e alunas da próxima turma**"""

matriculas_por_cursos.head()

matriculas.head()

id_curso = 16
proxima_turma = matriculas.query("id_curso == {}".format(id_curso))

proxima_turma.head()

nomes.sample(3)

proxima_turma.set_index('id_aluno').join(nomes.set_index('id_aluno'))

proxima_turma.set_index('id_aluno').join(nomes.set_index('id_aluno'))['nome']

proxima_turma = proxima_turma.set_index('id_aluno').join(nomes.set_index('id_aluno'))['nome'].to_frame()

proxima_turma

nome_curso = cursos.loc[id_curso]
nome_curso

nome_curso = nome_curso.nome_do_curso

nome_curso

proxima_turma.rename(columns={'nome':f'Alunos do curso de {nome_curso}'})

proxima_turma = proxima_turma.rename(columns={'nome':f'Alunos do curso de {nome_curso}'})

proxima_turma.sample(5)



"""# **Excel**"""

proxima_turma.to_excel('proxima_turma.xlsx', index=False, engine='openpyxl')

pd.read_excel('proxima_turma.xlsx')

