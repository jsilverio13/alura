# -*- coding: utf-8 -*-
"""nlp-classificacao-multilabel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H0Qy8AM1IJbAoHjo-iafjZ1CpccEG61n
"""

import pandas as pd

uri = "https://raw.githubusercontent.com/alura-cursos/alura_classificacao_multilabel/master/dataset/stackoverflow_perguntas.csv"

perguntas = pd.read_csv(uri)
perguntas.sample(10)

print(len(perguntas))

print(len(perguntas.Tags.unique()))

print(perguntas.Tags.unique())

lista_tags = list()
for tags in perguntas.Tags.unique():
    for tag in tags.split():
        if tag not in lista_tags:
            lista_tags.append(tag)

print(lista_tags)

node_js = list()

for linha_tag in perguntas.Tags:
    if 'node.js' in linha_tag:
        node_js.append(1)
    else:
        node_js.append(0)

print(node_js)

perguntas['node.js'] = node_js

perguntas.head()

def nova_coluna(lista_tags, dataframe, nome_tags):
    for tag in lista_tags:
        coluna = list()
        for linha_tag in dataframe[nome_tags]:
            if tag in linha_tag:
                coluna.append(1)
            else:
                coluna.append(0)
        
        dataframe[tag] = coluna

nova_coluna(lista_tags, perguntas, "Tags")
perguntas.sample()

lista_zip_tags = list(zip(
    perguntas[lista_tags[0]],
    perguntas[lista_tags[1]],
    perguntas[lista_tags[2]],
    perguntas[lista_tags[3]]
))

perguntas["todas_tags"] = lista_zip_tags
perguntas.sample(10)

from sklearn.model_selection import train_test_split

SEED = 123

perguntas_treino, perguntas_teste, tags_treino, tags_teste = train_test_split(
    perguntas.Perguntas,
    perguntas.todas_tags,
    test_size = 0.2,
    random_state= SEED
)

perguntas_treino

from sklearn.feature_extraction.text import TfidfVectorizer


vetorizar = TfidfVectorizer(
    max_features=5000,
    max_df=0.85
)

vetorizar

vetorizar.fit(perguntas.Perguntas)

perguntas_treino_tfidf = vetorizar.transform(perguntas_treino)
perguntas_teste_tfidf = vetorizar.transform(perguntas_teste)

print(perguntas_treino_tfidf.shape)
print(perguntas_teste_tfidf.shape)

type(tags_treino)

import numpy as np

tags_treino_array = np.asarray(list(tags_treino))
tags_teste_array = np.asarray(list(tags_teste))

from sklearn.multiclass import OneVsRestClassifier
from sklearn.linear_model import LogisticRegression

regressao_logistica = LogisticRegression(solver = 'lbfgs')
classificador_onevsrest = OneVsRestClassifier(regressao_logistica)
classificador_onevsrest.fit(perguntas_treino_tfidf, tags_treino_array)
resultado_onevsrest = classificador_onevsrest.score(perguntas_teste_tfidf, tags_teste_array)
print(f"Resultado {resultado_onevsrest * 100:.2f}%")

from sklearn.metrics import hamming_loss

previsao_onevsrest = classificador_onevsrest.predict(perguntas_teste_tfidf)
hamming_loss_onevsrest = hamming_loss(tags_teste_array, previsao_onevsrest)
print(f"Resultado {hamming_loss_onevsrest:.2f}")

perguntas.corr()

!pip install scikit-multilearn

from skmultilearn.problem_transform import ClassifierChain

regressao_logistica = LogisticRegression(solver = 'lbfgs')

classificador_cadeia = ClassifierChain(regressao_logistica)
classificador_cadeia.fit(perguntas_treino_tfidf, tags_treino_array)
resultado_cadeia = classificador_cadeia.score(perguntas_teste_tfidf, tags_teste_array)
previsao_cadeia = classificador_cadeia.predict(perguntas_teste_tfidf)
hamming_loss_cadeia = hamming_loss(tags_teste_array, previsao_cadeia)

print(f"Resultado {hamming_loss_cadeia:.2f}")
print(f"Resultado {resultado_cadeia * 100:.2f}%")

from skmultilearn.problem_transform import BinaryRelevance

regressao_logistica = LogisticRegression(solver = 'lbfgs')

classificador_br = ClassifierChain(regressao_logistica)
classificador_br.fit(perguntas_treino_tfidf, tags_treino_array)
resultado_br = classificador_br.score(perguntas_teste_tfidf, tags_teste_array)
previsao_br = classificador_br.predict(perguntas_teste_tfidf)
hamming_loss_br = hamming_loss(tags_teste_array, previsao_br)

print(f"Resultado {hamming_loss_br:.2f}")
print(f"Resultado {resultado_br * 100:.2f}%")

from skmultilearn.adapt import MLkNN

classificador_mlknn = MLkNN()

# classificador_mlknn.fit(perguntas_treino_tfidf, tags_treino_array)
# resultado_mlknn = classificador_mlknn.score(perguntas_teste_tfidf, tags_teste_array)
# previsao_mlknn = classificador_mlknn.predict(perguntas_teste_tfidf)
# hamming_loss_mlknn = hamming_loss(tags_teste_array, previsao_mlknn)

# print(f"Resultado {hamming_loss_mlknn:.2f}")
# print(f"Resultado {resultado_mlknn * 100:.2f}%")

resultados_classificacao = pd.DataFrame()
resultados_classificacao['perguntas'] = perguntas_teste.values
resultados_classificacao['tags_real'] = list(tags_teste)
resultados_classificacao['BR'] = list(previsao_br.toarray())
resultados_classificacao['cadeia'] = list(previsao_cadeia.toarray())
resultados_classificacao['mlknn'] = list(previsao_cadeia.toarray())
resultados_classificacao.head()

