# -*- coding: utf-8 -*-
"""machine-learning-arvores-decisao-aprofundando-modelos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dULgeorHLUh34Toc6ZLJlErZ_bI2WGvO
"""

from google.colab import drive
drive.mount('/content/drive', force_remount = True)
PATH = '/content/drive/MyDrive/Curso/Alura/machine-learning-arvores-decisao-aprofundando-modelos/data'

import pandas as pd

dados = pd.read_csv(f'{PATH}/creditcard.csv')
dados.head()

print(dados.isna().sum())

n_transacoes = dados['Class'].count()
n_fraudes = dados['Class'].sum()
n_normais = n_transacoes - n_fraudes
fraudes_porc = n_fraudes / n_transacoes
normais_porc = n_normais / n_transacoes

print("Número de transações: ", n_transacoes)
print("Número de fraudes: ", n_fraudes, "%.2f" %(fraudes_porc*100))
print("Número de transações normais: ", n_normais, "%.2f" %(normais_porc*100))

from sklearn.model_selection import StratifiedShuffleSplit

def executar_validador(X, y):
  validador = StratifiedShuffleSplit(n_splits=1, test_size=0.1, random_state=0)
  for treino_id, teste_id in validador.split(X, y):
    X_train, X_test = X[treino_id], X[teste_id]
    y_train, y_test = y[treino_id], y[teste_id]
  return X_train, X_test, y_train, y_test

# Commented out IPython magic to ensure Python compatibility.
# %%time
# from sklearn import tree
# 
# def executar_classificador(classificador, X_train, X_test, y_train):
#   arvore = classificador.fit(X_train, y_train)
#   y_pred = arvore.predict(X_test)
#   return y_pred

import matplotlib.pyplot as plt

def salvar_arvore(classificador, nome):
  plt.figure(figsize=(200,100))
  tree.plot_tree(classificador, filled=True, fontsize=14)
  plt.savefig(nome)
  plt.close()

from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score

def validar_arvore(y_test, y_pred):
  print(accuracy_score(y_test, y_pred))
  print(precision_score(y_test, y_pred))
  print(recall_score(y_test, y_pred))
  print(confusion_matrix(y_test, y_pred))

#execucao do validador
X = dados.drop('Class', axis=1).values
y = dados['Class'].values
X_train, X_test, y_train, y_test = executar_validador(X, y)

#execucao do classificador DecisionTreeClassifier
classificador_arvore_decisao = tree.DecisionTreeClassifier()
y_pred_arvore_decisao = executar_classificador(classificador_arvore_decisao, X_train, X_test, y_train)

#criacao da figura da arvore de decisao
salvar_arvore(classificador_arvore_decisao, "arvore_decisao1.png")

#validacao arvore de decisao
validar_arvore(y_test, y_pred_arvore_decisao)

print(classificador_arvore_decisao)
print(classificador_arvore_decisao.get_depth())

# Commented out IPython magic to ensure Python compatibility.
# %%time
# #execucao do classificador DecisionTreeClassifier
# classificador_arvore_decisao = tree.DecisionTreeClassifier(max_depth=10, random_state=0)
# y_pred_arvore_decisao = executar_classificador(classificador_arvore_decisao, X_train, X_test, y_train)

validar_arvore(y_test, y_pred_arvore_decisao)

#execucao do classificador DecisionTreeClassifier
classificador_arvore_decisao = tree.DecisionTreeClassifier(max_depth=10, random_state=0, min_samples_leaf=10)
y_pred_arvore_decisao = executar_classificador(classificador_arvore_decisao, X_train, X_test, y_train)

validar_arvore(y_test, y_pred_arvore_decisao)

classificador_arvore_decisao = tree.DecisionTreeClassifier(max_depth=5, random_state=0)
y_pred_arvore_decisao = executar_classificador(classificador_arvore_decisao, X_train, X_test, y_train)

validar_arvore(y_test, y_pred_arvore_decisao)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# from sklearn.ensemble import RandomForestClassifier
# 
# classificador_random_forest = RandomForestClassifier(n_estimators=100, random_state=0)
# y_pred_random_forest = executar_classificador(classificador_random_forest, X_train, X_test, y_train)

salvar_arvore(classificador_random_forest.estimators_[0], "random_forest1")
salvar_arvore(classificador_random_forest.estimators_[1], "random_forest2")

validar_arvore(y_test, y_pred_random_forest)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# from sklearn.ensemble import RandomForestClassifier
# 
# classificador_random_forest = RandomForestClassifier(n_estimators=50, random_state=0, max_depth=10)
# y_pred_random_forest = executar_classificador(classificador_random_forest, X_train, X_test, y_train)

validar_arvore(y_test, y_pred_random_forest)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# from sklearn.ensemble import AdaBoostClassifier
# 
# classificador_adaboost = AdaBoostClassifier(random_state=0)
# y_pred_adaboost = executar_classificador(classificador_adaboost, X_train, X_test, y_train)

salvar_arvore(classificador_adaboost.estimators_[0], "adaboost1")
salvar_arvore(classificador_adaboost.estimators_[1], "adaboost2")
validar_arvore(y_test, y_pred_adaboost)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# from sklearn.ensemble import AdaBoostClassifier
# 
# classificador_adaboost = AdaBoostClassifier(random_state=0, n_estimators=100)
# y_pred_adaboost = executar_classificador(classificador_adaboost, X_train, X_test, y_train)

validar_arvore(y_test, y_pred_adaboost)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# from sklearn.ensemble import AdaBoostClassifier
# 
# classificador_adaboost = AdaBoostClassifier(random_state=0, n_estimators=200)
# y_pred_adaboost = executar_classificador(classificador_adaboost, X_train, X_test, y_train)

validar_arvore(y_test, y_pred_adaboost)

