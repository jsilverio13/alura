# -*- coding: utf-8 -*-
"""deep-learning-previsao-keras.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x0ZnzyLk4pxvfl-My24k83NlvD6GGDzr

# Passageiros
"""

import pandas as pd
import seaborn as sns
import matplotlib as mpl
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
import numpy as np

mpl.rcParams['figure.figsize'] = (12,8)
mpl.rcParams['font.size'] = (20)

uri = 'https://raw.githubusercontent.com/alura-cursos/deeptime/aula1/Passageiros.csv'

passageiros = pd.read_csv(uri)
passageiros.head()

sns.lineplot(x='tempo',y='passageiros',data=passageiros, label='dado_completo')

sc = StandardScaler()
sc.fit(passageiros)
dado_escalado =  sc.transform(passageiros)

x = dado_escalado[:,0]
y = dado_escalado[:,1]

sns.lineplot(x=x,y=y,label='dado escalado')
plt.xlabel('Passageiros')
plt.ylabel('Data')

tamanho_treino = int(len(passageiros) * 0.9)
tamanho_teste = len(passageiros) - tamanho_treino

xtreino = x[0:tamanho_treino]
ytreino = y[0:tamanho_treino]
xteste = x[tamanho_treino:len(passageiros)]
yteste = y[tamanho_treino:len(passageiros)]

sns.lineplot(x=xtreino,y=ytreino,label='treino')
sns.lineplot(x=xteste,y=yteste,label='teste')
plt.xlabel('Passageiros')
plt.ylabel('Data')
plt.legend()

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense



regressor = Sequential()

regressor.add(Dense(1, input_dim=1,kernel_initializer='Ones',activation='linear', use_bias=False))

regressor.compile(loss='mean_squared_error', optimizer='adam')

regressor.summary()

regressor.fit(xtreino,ytreino)

y_predict = regressor.predict(xtreino)

sns.lineplot(x=xtreino,y=ytreino,label='treino')
sns.lineplot(x=xtreino,y=y_predict[:,0],label='ajuste_treino')

d = {'tempo':xtreino, 'passageiros': y_predict[:,0]}
resultados = pd.DataFrame(data=d)
resultados.head()

resultados_transf = pd.DataFrame(sc.inverse_transform(resultados))

resultados_transf.columns = ['tempo', 'passageiros']

sns.lineplot(x='tempo',y='passageiros',data=passageiros,label='dado_completo')
sns.lineplot(x='tempo',y='passageiros',data=resultados_transf,label='ajuste_treino')

y_predict_teste = regressor.predict(xteste)

d = {'tempo':xteste, 'passageiros': y_predict_teste[:,0]}
resultados_teste = pd.DataFrame(data=d)
resultados_transf_teste = pd.DataFrame(sc.inverse_transform(resultados_teste))
resultados_transf_teste.columns = ['tempo', 'passageiros']
resultados_transf_teste.head()

sns.lineplot(x='tempo',y='passageiros',data=passageiros,label='dado_completo')
sns.lineplot(x='tempo',y='passageiros',data=resultados_transf,label='ajuste_treino')
sns.lineplot(x='tempo',y='passageiros',data=resultados_transf_teste,label='previsao')

regressor2 = Sequential()
regressor2.add(Dense(8, input_dim=1, kernel_initializer='random_uniform', activation='sigmoid', use_bias=False))
regressor2.add(Dense(8, kernel_initializer='random_uniform', activation='sigmoid', use_bias=False))
regressor2.add(Dense(1, kernel_initializer='random_uniform', activation='linear', use_bias=False))

regressor2.compile(loss='mean_squared_error', optimizer='adam')

regressor2.summary()

regressor2.fit(xtreino,ytreino,epochs=500)

y_predict = regressor2.predict(xtreino)

y_predict_teste = regressor2.predict(xteste)

sns.lineplot(x=xtreino,y=ytreino,label='treino')
sns.lineplot(x=xteste,y=yteste,label='teste')
sns.lineplot(x=xtreino,y=y_predict[:,0],label='ajuste_treino')
sns.lineplot(x=xteste,y=y_predict_teste[:,0],label='ajuste_teste')

vetor = pd.DataFrame(ytreino)[0]

def separa_dados(vetor,n_passos):
    x_novo, y_novo = [], []

    for i in range(n_passos, vetor.shape[0]):
        x_novo.append(list(vetor.loc[i-n_passos:i-1]))
        y_novo.append(vetor.loc[i])

    x_novo, y_novo = np.array(x_novo), np.array(y_novo)

    return x_novo, y_novo

x_treino_novo, y_treino_novo = separa_dados(vetor,1)

vetor2 = pd.DataFrame(yteste)[0]

x_teste_novo, y_teste_novo = separa_dados(vetor2,1)

regressor3 = Sequential()
regressor3.add(Dense(8, input_dim=1, kernel_initializer='ones', activation='linear', use_bias=False))
regressor3.add(Dense(64,  kernel_initializer='random_uniform', activation='sigmoid', use_bias=False))
regressor3.add(Dense(1,  kernel_initializer='random_uniform', activation='linear', use_bias=False))

regressor3.compile(loss='mean_squared_error', optimizer='adam')

regressor3.fit(x_treino_novo, y_treino_novo, epochs=100)

y_predict_novo = regressor3.predict(x_treino_novo)

sns.lineplot(x='tempo',y=y_treino_novo, data=passageiros[1:129], label='treino')
sns.lineplot(x='tempo',y=pd.DataFrame(y_predict_novo)[0], data=passageiros[1:129], label='ajuste_treino')

y_predict_teste_novo = regressor3.predict(x_teste_novo)

sns.lineplot(x='tempo',y=y_treino_novo, data=passageiros[1:129], label='treino')
sns.lineplot(x='tempo',y=pd.DataFrame(y_predict_novo)[0], data=passageiros[1:129], label='ajuste_treino')
sns.lineplot(x='tempo',y=y_teste_novo, data=passageiros[130:144], label='teste')
sns.lineplot(x='tempo',y=pd.DataFrame(y_predict_teste_novo)[0], data=passageiros[130:144], label='previsão')

x_treino_novo, y_treino_novo = separa_dados(vetor,4)
x_teste_novo, y_teste_novo = separa_dados(vetor2,4)

regressor4 = Sequential()
regressor4.add(Dense(8, input_dim=4, kernel_initializer='ones', activation='linear', use_bias=False))
regressor4.add(Dense(64,  kernel_initializer='random_uniform', activation='sigmoid', use_bias=False))
regressor4.add(Dense(1,  kernel_initializer='random_uniform', activation='linear', use_bias=False))

regressor4.compile(loss='mean_squared_error', optimizer='adam')

regressor4.fit(x_treino_novo, y_treino_novo, epochs=300)

y_predict_teste_novo = regressor4.predict(x_teste_novo)
y_predict_novo = regressor4.predict(x_treino_novo)

sns.lineplot(x='tempo',y=y_treino_novo, data=passageiros[4:129], label='treino')
sns.lineplot(x='tempo',y=pd.DataFrame(y_predict_novo)[0], data=passageiros[4:129], label='ajuste_treino')
sns.lineplot(x='tempo',y=y_teste_novo, data=passageiros[133:144], label='teste')
sns.lineplot(x='tempo',y=pd.DataFrame(y_predict_teste_novo)[0], data=passageiros[133:144], label='previsão')

"""# Bicicletas"""

uri = 'https://raw.githubusercontent.com/alura-cursos/deeptime/aula4/bicicletas.csv'

bike = pd.read_csv(uri)
bike.head()

bike['datas'] = pd.to_datetime(bike['datas'])

sns.lineplot(x='datas', y='contagem', data=bike)
plt.xticks(rotation=70)

sc2 = StandardScaler()

sc2.fit(bike['contagem'].values.reshape(-1,1))

y = sc2.transform(bike['contagem'].values.reshape(-1,1))

tamanho_treino = int(len(bike)*0.9)
tamanho_teste = len(bike)-tamanho_treino

ytreino = y[0:tamanho_treino]
yteste = y[tamanho_treino:len(bike)]

sns.lineplot(x='datas',y=ytreino[:,0],data=bike[0:tamanho_treino], label='treino')
sns.lineplot(x='datas',y=yteste[:,0],data=bike[tamanho_treino:len(bike)], label='teste')
plt.xticks(rotation=70)

vetor = pd.DataFrame(ytreino)[0]
vetor2 = pd.DataFrame(yteste)[0]

xtreino_novo, ytreino_novo = separa_dados(vetor, 10)

xteste_novo, yteste_novo = separa_dados(vetor2, 10)

xtreino_novo = xtreino_novo.reshape((xtreino_novo.shape[0], xtreino_novo.shape[1],1))
xteste_novo = xteste_novo.reshape((xteste_novo.shape[0], xteste_novo.shape[1],1))

from tensorflow.keras.layers import LSTM

recorrente = Sequential()

recorrente.add(LSTM(128,input_shape=(xtreino_novo.shape[1], xtreino_novo.shape[2])))
recorrente.add(Dense(units=1))

recorrente.compile(loss='mean_squared_error', optimizer='RMSProp')

recorrente.summary()

recorrente.fit(xtreino_novo, ytreino_novo, validation_data=(xteste_novo,yteste_novo), epochs=10 )

y_ajustado = recorrente.predict(xtreino_novo)
y_predito = recorrente.predict(xteste_novo)

sns.lineplot(x='datas',y=ytreino[:,0],data=bike[0:tamanho_treino], label='treino')
sns.lineplot(x='datas',y=y_ajustado[:,0],data=bike[0:15662],label='ajuste_treino')
sns.lineplot(x='datas',y=yteste[:,0],data=bike[tamanho_treino:len(bike)], label='teste')
sns.lineplot(x='datas',y=y_predito[:,0],data=bike[tamanho_treino+10:len(bike)], label='previsão')
plt.xticks(rotation=70)

from tensorflow.keras.layers import GRU

recorrente_g = Sequential()

recorrente_g.add(GRU(128,input_shape=(xtreino_novo.shape[1],xtreino_novo.shape[2])))
recorrente_g.add(Dense(units=1))
recorrente_g.compile(loss='mean_squared_error',optimizer='RMSProp')

recorrente_g.summary()

resultado2 = recorrente_g.fit(xtreino_novo,ytreino_novo, validation_data=(xteste_novo,yteste_novo),epochs=10)

sns.lineplot(x='datas',y=ytreino[:,0],data=bike[0:tamanho_treino], label='treino')
sns.lineplot(x='datas',y=y_ajustado[:,0],data=bike[0:15662],label='ajuste_treino')
sns.lineplot(x='datas',y=yteste[:,0],data=bike[tamanho_treino:len(bike)], label='teste')
sns.lineplot(x='datas',y=y_predito[:,0],data=bike[tamanho_treino+10:len(bike)], label='previsão')
plt.xticks(rotation=70)

plt.plot(resultado2.history['loss'])
plt.plot(resultado2.history['val_loss'])
plt.ylabel('Custo')
plt.xlabel('Épocas')
plt.legend(['treino','teste'])

