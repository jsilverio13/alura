# -*- coding: utf-8 -*-
"""machine-learning-data-analytics-marketing-digital.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F5lWoBKy1QLm92xu-Dourb3QG9CW8WGT

# Data Prep
"""

import pandas as pd

uri = 'https://raw.githubusercontent.com/alura-cursos/digital-marketing-ml/aula4/train.csv'
df = pd.read_csv(uri)

df.head()

df.shape

len(df.fullVisitorId.unique())

df.dtypes

df = pd.read_csv(uri, dtype={'date':object,'fullVisitorId':object,'VisitId':object})

df.dtypes

df.head()

df.device.iloc[0]

type(df.device.iloc[0])

import json

type(json.loads(df.device.iloc[0]))

json.loads(df.device.iloc[0])

pd.DataFrame([json.loads(linha) for linha in df.device])

dicionarios = ['device','geoNetwork','trafficSource','totals']

for coluna in dicionarios:
    df = df.join(pd.DataFrame([json.loads(linha) for linha in df[coluna]]))

df.head()

df.drop(dicionarios, axis=1, inplace=True)

df.head()

"""# Limpando os dados"""

df.drop('adwordsClickInfo',axis=1,inplace=True)

coluna_na = []
for coluna in df.columns:
    print(coluna + ': ' + str(len(df[coluna].unique())))
    if len(df[coluna].unique()) == 1:
        coluna_na.append(coluna)

coluna_na

len(coluna_na)

df.drop(coluna_na,axis=1,inplace=True)

df.head()

df.shape

df.dtypes

quant = ['bounces', 'hits','newVisits','pageviews', 'transactionRevenue']

for coluna in quant:
    df[coluna] = pd.to_numeric(df[coluna])

df.dtypes

df.head()

df.transactionRevenue.fillna(0, inplace=True)

df.transactionRevenue = df.transactionRevenue / 1000000

df.shape

len(set(df.fullVisitorId))

"""# Feature Engineering"""

df_quant = df.groupby('fullVisitorId',as_index=False)[quant].sum()

df_quant.head()

df_quant.shape

"""# Separando as bases"""

y = df_quant.transactionRevenue.copy()

X = df_quant.drop('transactionRevenue',axis=1)

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3, random_state=42)

X_train.head()

y_train.head()

"""# Regressão Linear"""

from sklearn.linear_model import LinearRegression

reg = LinearRegression()

reg.fit(X_train, y_train)

reg_predict = reg.predict(X_test)

reg_predict

X_test.head()

"""# Avaliando os resultados"""

resultados = pd.DataFrame()

resultados = pd.DataFrame()
resultados['revenue'] = y_test
resultados['predict'] = reg_predict
resultados['erro'] = reg_predict - y_test

resultados.head()

resultados[resultados.revenue > 0]

import numpy as np

"""## MSE"""

np.mean((reg_predict - y_test)**2)

"""## RMSE"""

np.sqrt(np.mean((reg_predict - y_test)**2))

from sklearn.metrics import mean_squared_error

np.sqrt(mean_squared_error(y_test,reg_predict))

np.mean(df_quant.transactionRevenue)

np.std(df_quant.transactionRevenue)

import seaborn as sns

sns.boxplot(reg_predict)

sns.boxplot(y_test)

sns.distplot(reg_predict - y_test)

"""# Melhorando o Feature Engineering"""

visitas_ultima = df.groupby('fullVisitorId',as_index=False)

visitas_ultima = visitas_ultima['visitNumber'].max()

visitas_ultima.head()

df.head()

usuarios_visitas_unicos = df.drop_duplicates(subset=['fullVisitorId','visitNumber'])

usuarios_visitas_unicos.head()

usuarios_visitas_unicos.shape

visitas = pd.merge(visitas_ultima,usuarios_visitas_unicos,left_on=['fullVisitorId','visitNumber'],
                  right_on=['fullVisitorId','visitNumber'],how='left')

visitas.head()

visitas.shape

visitas_primeira = df.groupby('fullVisitorId',as_index=False)

visitas_primeira = visitas_primeira['visitNumber'].min()

visitas_primeira.head()

visitas_primeira.set_index('fullVisitorId',inplace=True)

visitas_primeira.head()

visitas = visitas.join(visitas_primeira,how='left',on='fullVisitorId',rsuffix='_primeira')

visitas.head()

visitas = pd.merge(visitas,usuarios_visitas_unicos,left_on=['fullVisitorId','visitNumber_primeira'],
                  right_on=['fullVisitorId','visitNumber'],how='left', suffixes=['_ultima','_primeira'])

visitas.head()

"""# Limpando a base"""

quant

for coluna in quant:
    visitas.drop(coluna + '_ultima',axis=1,inplace=True)
    visitas.drop(coluna + '_primeira',axis=1,inplace=True)

visitas.head()

ids = ['sessionId_ultima','visitId_ultima','sessionId_primeira', 'visitId_primeira']

visitas.drop(ids,axis=1,inplace=True)

visitas.head()

visitas.columns

geo = ['city_primeira','continent_primeira','country_primeira','metro_primeira','region_primeira',
      'networkDomain_primeira','subContinent_primeira']

visitas.drop(geo,axis=1,inplace=True)

visitas.head()

"""# Criando novas variáveis"""

df_quant.head()

visitas = pd.merge(visitas,df_quant,left_on=['fullVisitorId'],
                  right_on=['fullVisitorId'],how='left')

visitas.head()

visitas['tempo_dif'] = visitas.visitStartTime_ultima - visitas.visitStartTime_primeira

visitas.head()

visits = df.groupby('fullVisitorId',as_index=False).count().visitNumber.values

visits

visitas['visits'] = visits

visitas.head()

data = '20160904'

data

data[0:4]

data[4:6]

data[6:8]

visitas['ano_ultima'] = pd.to_numeric([data[0:4] for data in visitas.date_ultima])
visitas['mes_ultima'] = pd.to_numeric([data[4:6] for data in visitas.date_ultima])
visitas['dia_ultima'] = pd.to_numeric([data[6:8] for data in visitas.date_ultima])

visitas['ano_primeira'] = pd.to_numeric([data[0:4] for data in visitas.date_primeira])
visitas['mes_primeira'] = pd.to_numeric([data[4:6] for data in visitas.date_primeira])
visitas['dia_primeira'] = pd.to_numeric([data[6:8] for data in visitas.date_primeira])

visitas.head()

visitas.dtypes