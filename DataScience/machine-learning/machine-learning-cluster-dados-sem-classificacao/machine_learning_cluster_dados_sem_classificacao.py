# -*- coding: utf-8 -*-
"""machine-learning-cluster-dados-sem-classificacao.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d439B1KJTxfH5myHgF6CNOJy_WoDS0Bx
"""

!pip install biokit

import pandas as pd
import numpy as np
import plotly.graph_objects as go
from biokit.viz import corrplot
import matplotlib.pyplot as plt

uri = 'https://raw.githubusercontent.com/alura-cursos/Clustering/Aula-1.-An%C3%A1lise-Explorat%C3%B3ria/Wine.csv'
df = pd.read_csv(uri)

df.head()

print(f'O dado possui {df.shape[0]} amostras e {df.shape[1]} atributos')

df = df.rename(columns = {'Alcohol' : 'Alcool', 'Ash' : 'Po', 'Ash_Alcalinity': 'Alcalinidade_po',
                          'Magnesium' : 'Magnesio','Total_Phenols' : 'Total_Fenois',
                          'Nonflavanoid_Phenols':'Fenois_nao_flavalonoides','Color_Intensity':'Intensidade_de_cor'})

df.head()

df.describe()

matriz_corr = df.corr()

corr_graf = corrplot.Corrplot(matriz_corr)
corr_graf.plot(upper = 'ellipse', fontsize = 'x-large')
fig = plt.gcf()
fig.set_size_inches(13,8)
fig.show()

colunas = df.columns
atributos = colunas

from sklearn import preprocessing

min_max_scaler = preprocessing.MinMaxScaler()
np_df = min_max_scaler.fit_transform(df)

df = pd.DataFrame(np_df, columns = atributos)

df.describe()

np_df = min_max_scaler.inverse_transform(df)
df = pd.DataFrame(np_df, columns = atributos)
df.describe()

min_max_scaler = preprocessing.MinMaxScaler()
np_df = min_max_scaler.fit_transform(df)

df = pd.DataFrame(np_df, columns = atributos)
#normalizados

from sklearn.cluster import KMeans

agrupador = KMeans(n_clusters=4)
agrupador.fit(df)
labels = agrupador.labels_
print(labels)

fig = go.Figure()
fig.add_trace(go.Scatter(x=df['Intensidade_de_cor'], y = df['Alcool'],
                                                        mode = 'markers',                      
                                                        marker = dict(color = agrupador.labels_.astype(np.float)),
                                                        text = labels))
fig.show()

agrupador = KMeans(n_clusters=3)
agrupador.fit(df)
labels = agrupador.labels_
print(labels)

fig = go.Figure()
fig.add_trace(go.Scatter(x=df['Intensidade_de_cor'],
                         y = df['Alcool'], mode = 'markers',                      
                          marker = dict(color = agrupador.labels_.astype(np.float)),
                        text = labels))

fig.show()

fig = go.Figure()
fig.add_trace(go.Scatter3d(x=df['Intensidade_de_cor'],
                         y = df['Alcool'], z = df['Proline'],
                         mode = 'markers',                      
                          marker = dict(color = agrupador.labels_.astype(np.float)),
                        text = [0, 1, 2]))
fig.show()

fig.update_layout(scene = dict(
                    xaxis_title='Intensidade de Cor',
                    yaxis_title='Àlcool',
                    zaxis_title='Proline'))
fig.show()

centros = pd.DataFrame(agrupador.cluster_centers_)
centros.columns = colunas
centros.head()

fig.add_trace(go.Scatter3d(x=centros['Intensidade_de_cor'],
                         y = centros['Alcool'], z=centros['Proline'],
                         mode = 'markers',                  
                          marker = dict(color = 'red'),
                        text = [0, 1, 2]))

fig.show()

from sklearn.cluster import DBSCAN
agrupador = DBSCAN(eps = 1.31, min_samples = 15, metric = 'manhattan')
agrupador.fit(df)

agrupador.labels_

np.unique(agrupador.labels_)

agrupador = DBSCAN(eps = 0.10, min_samples = 15, metric = 'manhattan')
agrupador.fit(df)
agrupador.labels_

agrupador = DBSCAN(eps = 10, min_samples = 15, metric = 'manhattan')
agrupador.fit(df)
agrupador.labels_

agrupador = DBSCAN(eps = 1.5, min_samples = 30, metric = 'manhattan')
agrupador.fit(df)
agrupador.labels_

agrupador = DBSCAN(eps = 1.5, min_samples = 80, metric = 'manhattan')
agrupador.fit(df)
agrupador.labels_

agrupador = DBSCAN(eps = 0.7, min_samples = 15, metric = 'euclidean')
agrupador.fit(df)
agrupador.labels_

from sklearn.cluster import MeanShift

agrupador = MeanShift()
agrupador.fit(df)
agrupador.labels_

from sklearn.cluster import estimate_bandwidth

BW = estimate_bandwidth(df, quantile = 0.8)
print(BW)

BW = estimate_bandwidth(df, quantile = 0.1)
agrupador = MeanShift(bandwidth = BW)
agrupador.fit(df)
agrupador.labels_

gig =go.Figure()
fig.add_trace(go.Scatter3d(x = df['Intensidade_de_cor'],
                     y = df['Alcool'],
                     z = df['Proline'],
                     mode = 'markers',
                     marker = dict(color = labels.astype(np.float)),
                     text = labels))

fig.show()

from sklearn.metrics import silhouette_samples, silhouette_score

faixa_n_clusters = [i for i in range(2,10)]
print(faixa_n_clusters)

from sklearn.cluster import KMeans
valores_silhueta = []
for k in faixa_n_clusters:
    agrupador = KMeans(n_clusters=k)
    labels = agrupador.fit_predict(df)
    media_silhueta = silhouette_score(df, labels)
    valores_silhueta.append(media_silhueta)

fig =go.Figure()
fig.add_trace(go.Scatter(x = faixa_n_clusters, y = valores_silhueta))
fig.update_layout(
    title = "Valores de Silhueta Médios",
    xaxis_title = "Número de Clústeres",
    yaxis_title = "Valor médio de silhueta",
    )

faixa_quantil = np.linspace(0.02, 0.5, 15)
faixa_quantil

valores_silhueta = []
quantil_plot = []

for quantil in faixa_quantil:
    bandwidth = estimate_bandwidth(df, quantile = quantil)
    agrupador = MeanShift(bandwidth = bandwidth) 
    labels = agrupador.fit_predict(df)

if (len(np.unique(labels)) < len(df) and len(np.unique(labels)) > 1):
        media_silhueta = silhouette_score(df, labels)
        valores_silhueta.append(media_silhueta)
        quantil_plot.append(quantil)

fig = go.Figure()
fig.add_trace(go.Scatter(x = quantil_plot,
                         y = valores_silhueta))
fig.update_layout(dict(xaxis_title = 'Quantil',
                       yaxis_title='Média Silhueta')),
fig.show()

faixa_quantil = np.linspace(0.02, 0.5, 30)
faixa_quantil

valores_silhueta = []
quantil_plot = []

for quantil in faixa_quantil:
    bandwidth = estimate_bandwidth(df, quantile = quantil)
    agrupador = MeanShift(bandwidth = bandwidth) 
    labels = agrupador.fit_predict(df)

if (len(np.unique(labels)) < len(df) and len(np.unique(labels)) > 1):
        media_silhueta = silhouette_score(df, labels)
        valores_silhueta.append(media_silhueta)
        quantil_plot.append(quantil)

fig = go.Figure()
fig.add_trace(go.Scatter(x = quantil_plot,
                         y = valores_silhueta))
fig.update_layout(dict(xaxis_title = 'Quantil',
                       yaxis_title='Média Silhueta')),
fig.show()

from sklearn.cluster import KMeans, MeanShift, DBSCAN, estimate_bandwidth
from sklearn.metrics import silhouette_score

agrupador_kmeans = KMeans(n_clusters = 3)
agrupador_dbscan = DBSCAN(eps = 2.1, min_samples = 56, metric = 'manhattan')

BW = estimate_bandwidth(df, quantile = 0.28)
agrupador_meanshift = MeanShift(bandwidth = BW)

labels_kmeans = agrupador_kmeans.fit_predict(df)
labels_dbscan = agrupador_dbscan.fit_predict(df)
labels_meanshift = agrupador_meanshift.fit_predict(df)

print("Labels K-means: ", labels_kmeans)
print("Labels DBSCAN: ", labels_dbscan)
print("Labels MeanShift: ", labels_meanshift)

print("O coeficiente de silhueta do K-means é:", silhouette_score(df, labels_kmeans))
print("O coeficiente de silhueta do DBSCAN é: ", silhouette_score(df,labels_dbscan))
print("O coeficiente de silhueta do MeanShift é: ", silhouette_score(df,labels_meanshift))

