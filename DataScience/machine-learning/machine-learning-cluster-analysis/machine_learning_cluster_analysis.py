# -*- coding: utf-8 -*-
"""machine-learning-cluster-analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r9xv5ZPm9cSSV5F3f8JjQnGaK0pcNLEf

# Importando dados
"""

import pandas as pd

uri = 'https://raw.githubusercontent.com/alura-cursos/alura-clustering-validation/base-de-dados/CC%20GENERAL.csv'
df = pd.read_csv(uri)

df.head()

"""# Pré processamento"""

atributos_removidos = ['CUST_ID', 'TENURE']
df.drop(columns = atributos_removidos, inplace=True)

df.head()

missing = df.isna().sum()
missing

df.fillna(df.median(), inplace=True)
missing = df.isna().sum()
missing

from sklearn.preprocessing import Normalizer
values = Normalizer().fit_transform(df.values)
values

"""# Processamento"""

from sklearn.cluster import KMeans

kmeans = KMeans(n_clusters=5, n_init=10, max_iter=300)
y_pred = kmeans.fit_predict(values)

"""# Validação"""

from sklearn import metrics
labels = kmeans.labels_
silhouette = metrics.silhouette_score(values, labels, metric='euclidean')
silhouette

dbs = metrics.davies_bouldin_score(values, labels)
dbs

calinski = metrics.calinski_harabasz_score(values, labels) 
calinski

def clustering_algorithm(n_clusters, dataset):
    kmeans = KMeans(n_clusters=n_clusters, n_init=10, max_iter=300)
    labels = kmeans.fit_predict(dataset)
    s = metrics.silhouette_score(dataset, labels, metric='euclidean')
    dbs = metrics.davies_bouldin_score(dataset, labels)
    calinski = metrics.calinski_harabasz_score(dataset, labels)
    return s, dbs, calinski

s1, dbs1, calinski1 = clustering_algorithm(3, values)
print(s1, dbs1, calinski1)

s2, dbs2, calinski2 = clustering_algorithm(5, values)
print(s2, dbs2, calinski2)

s3, dbs3, calinski3 = clustering_algorithm(10, values)
print(s3, dbs3, calinski3)

import numpy as np
random_data = np.random.rand(8950,16)
s, dbs, calinski = clustering_algorithm(5, random_data)
print(s, dbs, calinski)
print(s2,dbs2, calinski2)

set1, set2, set3 = np.array_split(values, 3)
s1, dbs1, calinski1 = clustering_algorithm(5, set1)
s2, dbs2, calinski2 = clustering_algorithm(5, set2)
s3, dbs3, calinski3 = clustering_algorithm(5, set3)
print(s1, dbs1, calinski1)
print(s2, dbs2, calinski2)
print(s3, dbs3, calinski3)

import matplotlib.pyplot as plt
plt.figure(figsize = (16,10))
plt.scatter(df["PURCHASES"], df['PAYMENTS'], c=labels, s=5, cmap='rainbow' )
plt.xlabel("valor total pago")
plt.ylabel("valor total gasto")
plt.show()

df.groupby("cluster").describe()

centroids = kmeans.cluster_centers_
print(centroids)

max = len(centroids[0])
for i in range(max):
    print(df.columns.values[i],"\n{:.4f}".format(centroids[:, i].var()))

df.groupby("cluster")["BALANCE"].describe()

description = df.groupby("cluster", )[["BALANCE", "PURCHASES", "CASH_ADVANCE", "CREDIT_LIMIT", "PAYMENTS"]]
n_clients = description.size()
description = description.mean()
description['n_clients'] = n_clients
description