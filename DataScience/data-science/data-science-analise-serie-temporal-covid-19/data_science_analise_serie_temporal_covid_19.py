# -*- coding: utf-8 -*-
"""data-science-analise-serie-temporal-covid-19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19R8c7ti-F1trH-Yt3S8dNu-X9isF4sE3
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from datetime import date
import warnings

warnings.filterwarnings('ignore')

df_total = pd.read_csv("https://raw.githubusercontent.com/alura-cursos/COVID-Alura/main/cases-brazil-states.csv")
df_total.head()

df = df_total[df_total['estado'] != 'TOTAL']
df['data'] = pd.to_datetime(df_total['data']).dt.date

df.head()

plt.figure(figsize=(20,8))
fig = sns.lineplot(x='data',y='Obitos',hue='estado',data=df)
fig.set_title('Óbitos por estado em função do tempo', loc='left', fontsize=24)
fig.set_xlabel('Data', fontsize=24)
fig.set_ylabel('Óbitos', fontsize=24)

df_sp = df[df['estado'] == 'SP']
df_sp.head()

plt.figure(figsize=(20,8))
fig = sns.lineplot(x='data',y='Obitos',data=df_sp)
fig.set_title('Óbitos função do tempo no Estado de SP', loc='left', fontsize=24)
fig.set_xlabel('Data', fontsize=24)
fig.set_ylabel('Óbitos', fontsize=24)
fig.set_yscale('log')
plt.show()

plt.figure(figsize=(20,8))
fig = sns.lineplot(x='data',y='Obitos',data=df, hue='estado')
fig.set_title('Óbitos por estado em função do tempo', loc='left', fontsize=24)
fig.set_xlabel('Data', fontsize=24)
fig.set_ylabel('Óbitos', fontsize=24)
fig.set_yscale('log')
plt.show()

plt.figure(figsize=(20,8))
fig = plt.bar(df_sp.data,df_sp.suspeitos,label='Suspeitos', data=df_sp)
plt.bar(df_sp.data,df_sp.recuperados,label='Recuperados', data=df_sp)
plt.bar(df_sp.data,df_sp.Obitos,label='Óbitos', data=df_sp)
plt.xlabel('Data', fontsize=24)
plt.ylabel('Óbitos, Recuperados e Suspeitos no estado de SP' ,fontsize=24,rotation=90)
plt.legend()
plt.show()

def plotar_linha(titulo,xlabel,ylabel,x,y,dataset,hue):
    ax = sns.lineplot(x=x,y=y,hue=hue,data=dataset)
    ax.figure.set_size_inches(12,6)
    ax.set_title(titulo,loc='left',fontsize=20)
    ax.set_ylabel(ylabel,fontsize=20)
    ax.set_xlabel(xlabel,fontsize=20)

def plotar_barra(titulo,xlabel,ylabel,x,y,dataset):
    plt.figure(figsize=(20,6))
    ax = plt.bar(dataset[x],dataset[y])
    plt.title(titulo,loc='left',fontsize=20)
    plt.ylabel(ylabel,fontsize=20)
    plt.xlabel(xlabel,fontsize=20)

plotar_barra('Novos casos em SP', 'Data','Novos Casos', 'data', 'novosCasos', df_sp)

df_sp['aceleracaoCasos'] = df_sp['novosCasos'].diff()
df_sp['aceleracaoObitos'] = df_sp['Obitos'].diff()

plotar_barra('Acelaração de Óbitos em SP', 'Data', 'Aceleração', 'data','aceleracaoObitos', df_sp)

plotar_barra('Acelaração de Novos Casos em SP', 'Data', 'Aceleração', 'data','aceleracaoCasos', df_sp)

df_sp['aceleracaoRecuperados'] = df_sp['recuperados'].diff()

plotar_barra('Aceleração de recuperados em SP','Data','Aceleração','data','aceleracaoRecuperados',df_sp)

df_sp['mediaObitos'] = df_sp.novosObitos.rolling(window=7,center=False).mean()
df_sp['mediaObitos_14'] = df_sp.novosObitos.rolling(window=14,center=False).mean()
df_sp.head(15)

plotar_linha('Média móvel de óbitos em SP', 'Data', 'Média' , 'data', 'mediaObitos',df_sp, None)
plotar_linha('Média móvel de Obitos em SP', 'Data', 'Média', 'data', 'mediaObitos_14', df_sp, None)
plt.bar(df_sp['data'],df_sp['novosObitos'], color='lightgrey')

from pandas.plotting import autocorrelation_plot

ax = plt.figure(figsize=(12,6))
ax.suptitle('Correlação dos óbitos', fontsize=18,x=0.26,y=0.95)
autocorrelation_plot(df_sp['Obitos'])

ax = plt.figure(figsize=(12,6))
ax.suptitle('Correlação dos novos óbitos', fontsize=18,x=0.26, y=0.95)
autocorrelation_plot(df_sp['novosObitos'])

ax = plt.figure(figsize=(12,6))
ax.suptitle('Correlação dos novos óbitos (média móvel)', fontsize=18,x=0.26, y=0.95)
autocorrelation_plot(df_sp['mediaObitos'][7:])

ax = plt.figure(figsize=(12,6))
ax.suptitle('Autocorrelação da aceleração de óbitos', fontsize=18,x=0.26, y=0.95)
autocorrelation_plot(df_sp['aceleracaoObitos'][1:])

df_sp['mês'] = pd.to_datetime(df_sp['data'])
df_sp['dia_da_semana'] = df_sp['mês'].dt.day_name()

dias_traduzidos = {'Monday' : 'Segunda' , 'Tuesday' : 'Terça' , 'Wednesday' : 'Quarta' , 'Thursday' : 'Quinta' , 'Friday' : 'Sexta' , 'Saturday' : 'Sábado' , 'Sunday' : 'Domingo'}

df_sp['dia_da_semana'] = df_sp['dia_da_semana'].map(dias_traduzidos)

agrupados_sp = df_sp.groupby('dia_da_semana')['Obitos', 'novosObitos', 'aceleracaoObitos'].mean().round()

agrupados_sp['dia_da_semana'] = agrupados_sp.index

agrupados_sp.head()

agrupados_sp = agrupados_sp.reindex(['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'])
agrupados_sp.head()

sns.barplot(agrupados_sp['dia_da_semana'], agrupados_sp.novosObitos)

def criar_features(df,label=None):
    df = df.copy()
    df['diasemana'] = df['mês'].dt.dayofweek
    df['mes'] = df['mês'].dt.month
    df['diames'] = df['mês'].dt.day

    X = df[['diasemana', 'mes', 'diames']]

    if label:
        y = df[label]
        return X,y
    return X

X, y = criar_features(df_sp, label='Obitos')

df_final = pd.concat([X,y], axis=1)

df_final.head(10)

g = sns.pairplot(df_final.dropna(), hue ='mes', x_vars=['diasemana', 'diames', 'mes'], y_vars='Obitos')
g.fig.set_size_inches(12,6)
g.axes[0][0].set_xlabel('Dia da semana', fontsize=15)
g.axes[0][1].set_xlabel('Dia do mês', fontsize=15)
g.axes[0][2].set_xlabel('Mês', fontsize=15)
g.axes[0][0].set_ylabel('Óbitos', fontsize=15)
plt.title('Óbitos por dia da semana, dia do mês e por mês', fontsize=15)
plt.show()

g.axes[0][0]

