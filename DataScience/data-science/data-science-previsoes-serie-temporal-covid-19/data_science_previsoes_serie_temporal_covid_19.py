# -*- coding: utf-8 -*-
"""data-science-previsoes-serie-temporal-covid-19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cAa_F64QI65ThMLFqRdlUQmLYYJoxWCO
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from datetime import date
import warnings

warnings.filterwarnings('ignore')

df_total = pd.read_csv("https://raw.githubusercontent.com/alura-cursos/COVID-Alura/main/cases-brazil-states.csv")
df_total['data'] = pd.to_datetime(df_total['data']).dt.date
df_total.head()

df_sp = df_total[df_total['estado'] == 'SP']
df_sp.head()

!pip install statsmodels==0.12.1

from statsmodels.tsa.seasonal import seasonal_decompose, STL

resultados = seasonal_decompose(df_sp.novosObitos, freq=7)
resultados

df_sp.index = pd.to_datetime(df_sp.data)

def plotar(y1,y2,y3,cor1,cor2,cor3,label1,label2,label3):
    plt.figure(figsize=(20,10))
    plt.plot(y1,color=cor1, label=label1)
    plt.plot(y2,color=cor2, label=label2)
    plt.plot(y3,color=cor3, label=label3)
    plt.legend(fontsize=18)

plotar(resultados.observed, resultados.trend, resultados.seasonal, 'red','blue','green', 'Observado', 'Tendência','Sazonalidade')

df_mg = df_total[df_total['estado'] == 'MG']
df_rj = df_total[df_total['estado'] == 'RJ']
df_sp = df_total[df_total['estado'] == 'SP']
df_sp.index = pd.to_datetime(df_sp.data)
df_mg.index = pd.to_datetime(df_mg.data)
df_rj.index = pd.to_datetime(df_rj.data)

resultados_mg = seasonal_decompose(df_mg.novosObitos, freq=7)
resultados_rj = seasonal_decompose(df_rj.novosObitos, freq=7)
resultados_sp = seasonal_decompose(df_sp.novosObitos, freq=7)

plotar(resultados_sp.trend, resultados_mg.trend, resultados_rj.trend, 'red','blue','green', 'SP', 'MG','RJ')

plotar(resultados_sp.seasonal, resultados_mg.seasonal, resultados_rj.seasonal, 'red','blue','green', 'SP', 'MG','RJ')

y = df_sp['Casos']
y.head()

from statsmodels.tsa.stattools import adfuller
adfuller(y.dropna())

print('p-valor', adfuller(y.dropna())[1])

from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

def plotarACF(y1,y2,y3):
    fig = plt.figure(figsize=(10,10))
    ax1 = fig.add_subplot(311)
    fig = plot_acf(y1, ax=ax1, title='Original')
    ax2 = fig.add_subplot(312)
    fig = plot_acf(y2, ax=ax2, title='1 Diff')
    ax3 = fig.add_subplot(313)
    fig = plot_acf(y3, ax=ax3, title='2 Diff')

plotarACF(y, y.diff().dropna(),y.diff().diff().dropna())

plotar(y, y.diff(),y.diff().diff(),'red','blue','green','Original','1 Diff','2 Diff')

plot_pacf(y.diff().dropna(),lags=40);

plot_pacf(y.diff().diff().dropna(),lags=40);

plot_pacf(y.diff().dropna(),lags=20);

plot_acf(y.diff().dropna(),lags=20);

from statsmodels.tsa.arima_model import ARIMA

modelo = ARIMA(y,order=(1,1,1))

modelo_fit = modelo.fit(disp=0)

print(modelo_fit.summary())

import itertools

p = d= q =range(0,2)
pdq =list(itertools.product(p,d,q))
seasonal_pdq = [(x[0], x[1], x[2], 7) for x in list(itertools.product(p,d,q))]

print('Exemplo de combinação de parametros para o ARIMA Sazonal')
print(f'SARIMAX {pdq[0]} x {seasonal_pdq[0]}')
print(f'SARIMAX {pdq[1]} x {seasonal_pdq[1]}')
print(f'SARIMAX {pdq[2]} x {seasonal_pdq[2]}')

y =df_sp['Casos']
y

import statsmodels.api as sm

aic_lista = []
for param in pdq:
    for param_seasonal in seasonal_pdq:
        mod = sm.tsa.statespace.SARIMAX(y, order=param, seasonal_order= param_seasonal)
        results = mod.fit()
        aic_lista.append(f'ARIMA{param}x{param_seasonal} - {results.aic}')

aic_lista

mod = sm.tsa.statespace.SARIMAX(y, order= (1,1,1), sesasonal_order=(1,1,1,7))
results = mod.fit()

results.plot_diagnostics(figsize=(16,8))
plt.show()

pred = results.get_prediction(start=pd.to_datetime('2020-07-01'), dynamic=False)
pred_ic = pred.conf_int()
pred_ic

ax = y['2020':].plot(label='Observado')
pred.predicted_mean.plot(ax=ax, label='Previsão', color='r', alpha=0.7, figsize=(16,10))
ax.fill_between(pred_ic.index, pred_ic.iloc[:,0], pred_ic.iloc[:,1], color='k', alpha=0.1)
ax.set_xlabel('Data')
ax.set_ylabel('Casos de COVID-19')
plt.legend()
plt.show()

pred_uc = results.get_forecast(steps=150)
pred_ic = pred_uc.conf_int()

ax = y.plot(label='Observado', figsize=(14,7))
pred_uc.predicted_mean.plot(ax=ax, label='Observado', color='r', alpha=0.7, figsize=(16,10))
ax.fill_between(pred_ic.index, pred_ic.iloc[:,0], pred_ic.iloc[:,1], color='k', alpha=0.1)
ax.set_xlabel('Data')
ax.set_ylabel('Casos de COVID-19')
plt.legend()
plt.show()

df