# -*- coding: utf-8 -*-
"""06 - pandas-selecao-agrupamento-dados.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19r9n3ROjXYJba8XhG1YYFdmXrFf7Ge47
"""

import pandas as pd

URL = 'https://caelum-online-public.s3.amazonaws.com/2927-pandas-selecao-agrupamento-dados/1-SEEG10_GERAL-BR_UF_2022.10.27-FINAL-SITE.xlsx'
emissoes_gases = pd.read_excel(URL, sheet_name ='GEE Estados')
emissoes_gases.head()

emissoes_gases.info()

emissoes_gases['Emissão / Remoção / Bunker'].unique()

(emissoes_gases['Emissão / Remoção / Bunker'] == 'Remoção NCI') | (emissoes_gases['Emissão / Remoção / Bunker'] == 'Remoção')

emissoes_gases[emissoes_gases['Emissão / Remoção / Bunker'].isin(['Remoção NCI', 'Remoção'])]

emissoes_gases.loc[emissoes_gases['Emissão / Remoção / Bunker'].isin(['Remoção NCI', 'Remoção']), 1970:2021]

emissoes_gases.loc[emissoes_gases['Emissão / Remoção / Bunker'].isin(['Remoção NCI', 'Remoção']), 1970:2021].max()

emissoes_gases.loc[emissoes_gases['Emissão / Remoção / Bunker'] == 'Bunker', 'Estado'].unique()

emissoes_gases = emissoes_gases[emissoes_gases['Emissão / Remoção / Bunker'] == 'Emissão']
emissoes_gases

emissoes_gases.loc[:,'Nível 1 - Setor':'Produto'].columns

colunas_info = list(emissoes_gases.loc[:,'Nível 1 - Setor':'Produto'].columns)
colunas_info

emissoes_gases.loc[:,1970:2021].columns

colunas_emissao = list(emissoes_gases.loc[:,1970:2021].columns)
colunas_emissao

emissoes_gases.melt(id_vars = colunas_info, value_vars = colunas_emissao, var_name = 'Ano' , value_name = 'Emissão')

emissoes_por_ano = emissoes_gases.melt(id_vars = colunas_info, value_vars = colunas_emissao, var_name = 'Ano' , value_name = 'Emissão')

emissoes_por_ano.groupby('Gás').groups

emissoes_por_ano.groupby('Gás').get_group('CO2 (t)')

emissoes_por_ano.groupby('Gás').sum(numeric_only = True)

emissoes_por_ano.groupby('Gás')[['Emissão']].sum()

emissao_por_gas = emissoes_por_ano.groupby('Gás')[['Emissão']].sum().sort_values('Emissão', ascending = False)
emissao_por_gas

emissao_por_gas.plot(kind = 'barh', figsize = (10,6));

print(f'A emissão de CO2 corresponde a {float((emissao_por_gas.iloc[0:9].sum()/emissao_por_gas.sum()).iloc[0])*100:.2f} % de emissão total de gases estufa no Brasil de 1970 a 2021.')

gas_por_setor = emissoes_por_ano.groupby(['Gás', 'Nível 1 - Setor'])[['Emissão']].sum()
gas_por_setor

gas_por_setor.xs('CO2 (t)', level = 0)

gas_por_setor.xs(('CO2 (t)', 'Mudança de Uso da Terra e Floresta'), level = [0,1])

gas_por_setor.xs('CO2 (t)', level = 0).max()

gas_por_setor.xs('CO2 (t)', level = 0).idxmax()

gas_por_setor.groupby(level = 0).max()

valores_max = gas_por_setor.groupby(level = 0).max().values

tabela_sumarizada = gas_por_setor.groupby(level = 0).idxmax()
tabela_sumarizada.insert(1, 'Quantidade de emissão',valores_max)
tabela_sumarizada

gas_por_setor.swaplevel(0, 1)

gas_por_setor.swaplevel(0, 1).groupby(level = 0).idxmax()

emissoes_por_ano

emissoes_por_ano.groupby('Ano')[['Emissão']].mean().plot(figsize = (10, 6));

emissoes_por_ano.groupby('Ano')[['Emissão']].mean().idxmax()

emissoes_por_ano.groupby(['Ano', 'Gás'])[['Emissão']].mean()

media_emissao_anual = emissoes_por_ano.groupby(['Ano', 'Gás'])[['Emissão']].mean().reset_index()
media_emissao_anual

media_emissao_anual = media_emissao_anual.pivot_table(index = 'Ano', columns = 'Gás', values = 'Emissão')
media_emissao_anual

media_emissao_anual.plot(subplots = True, figsize = (10, 40));

populacao_estados = pd.read_excel('https://caelum-online-public.s3.amazonaws.com/2927-pandas-selecao-agrupamento-dados/POP2022_Municipios.xls', header = 1, skipfooter = 34)
populacao_estados

populacao_estados.groupby('UF').sum(numeric_only = True)

#populacao_estados['POPULAÇÃO'].astype(int)

populacao_estados[populacao_estados['POPULAÇÃO'].str.contains('\(', na = False)]

populacao_estados = populacao_estados.assign()

populacao_estados = populacao_estados.assign(populacao_sem_parenteses = populacao_estados['POPULAÇÃO'])

populacao_estados = populacao_estados.assign(populacao_sem_parenteses = populacao_estados['POPULAÇÃO'].replace('\(\d{1,2}\)', '', regex = True))

populacao_estados = populacao_estados.assign(populacao_sem_parenteses = populacao_estados['POPULAÇÃO'].replace('\(\d{1,2}\)', '', regex = True),
                                             populacao = lambda x: x.loc[:,'populacao_sem_parenteses'])

populacao_estados = populacao_estados.assign(populacao_sem_parenteses = populacao_estados['POPULAÇÃO'].replace('\(\d{1,2}\)', '', regex = True),
                                             populacao = lambda x : x.loc[:, 'populacao_sem_parenteses'].replace('\.', '', regex = True))

populacao_estados[populacao_estados['POPULAÇÃO'].str.contains('\(', na = False)]

populacao_estados = populacao_estados.astype({'populacao':'int64'})

populacao_estados = populacao_estados.groupby('UF')[['populacao']].sum().reset_index()
populacao_estados

emissao_estados = emissoes_por_ano[emissoes_por_ano['Ano'] == 2021].groupby('Estado')[['Emissão']].sum().reset_index()
emissao_estados

dados_agrupados = pd.merge(emissao_estados, populacao_estados, left_on = 'Estado', right_on = 'UF')
dados_agrupados

dados_agrupados.plot(x = 'populacao', y= 'Emissão')

dados_agrupados.plot(x = 'populacao', y= 'Emissão', kind = 'scatter', figsize=(8,6));

import plotly.express as px
px.scatter(data_frame = dados_agrupados, x = 'populacao', y = 'Emissão', text = 'Estado')

px.scatter(data_frame = dados_agrupados, x = 'populacao', y = 'Emissão', text = 'Estado', opacity = 0)

dados_agrupados = dados_agrupados.assign(emissao_per_capita = dados_agrupados['Emissão']/dados_agrupados['populacao']).sort_values('emissao_per_capita', ascending = False)
dados_agrupados

px.scatter(data_frame = dados_agrupados, x = 'populacao', y = 'Emissão', text = 'Estado', size = 'emissao_per_capita')

