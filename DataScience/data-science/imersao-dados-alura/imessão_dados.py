# -*- coding: utf-8 -*-
"""Imessão_Dados.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JD0Dtdc3Mtk3szzVSZWPM_idVA5EljSH
"""

import pandas as pd

url_dados = 'https://github.com/alura-cursos/imersaodados3/blob/main/dados/dados_experimentos.zip?raw=true'
dados = pd.read_csv(url_dados, compression = 'zip')
dados

dados.head()

dados.shape

dados['tratamento']

dados['tratamento'].unique()

dados['tempo'].unique()

dados['dose'].unique()

dados['droga'].unique()

dados['g-0'].unique()

dados['tratamento'].value_counts()

dados['dose'].value_counts()

dados['tratamento'].value_counts(normalize = True)

dados['dose'].value_counts(normalize = True)

dados['tratamento'].value_counts().plot.pie()

dados['tempo'].value_counts().plot.pie()

dados['tempo'].value_counts().plot.bar()

dados_filtrados = dados[dados['g-0'] > 0]
dados_filtrados.head()
dados_filtrados.tail()
dados['droga'].nunique()

mapa = {'droga': 'composto'}
dados.rename(columns=mapa, inplace=True)

dados.head()

cod_compostos = dados['composto'].value_counts().index[0:5]

cod_compostos

dados.query('composto in @cod_compostos')

import seaborn as sns
import matplotlib.pyplot as plt

dados_query = dados.query('composto in @cod_compostos')
order = dados_query['composto'].value_counts().index

sns.set(style='darkgrid')
plt.figure(figsize=(10,8))
ax = sns.countplot(x = 'composto', data=dados_query, palette='dark', order = order)
ax.set_title('Top 5 Compostos', size=24)
plt.xlabel("Compostos", size=20)
plt.ylabel("Quantidade", size=20)
plt.show()

dados['g-0'].unique()

dados['g-0'].min()

dados['g-0'].max()

dados['g-0'].hist(bins = 150)

dados['g-10'].hist(bins = 150)

dados[['g-0', 'g-1']]

dados.loc[:, 'g-0':'g-771'].describe()

dados.loc[:, 'g-0':'g-771'].describe().T

dados.loc[:, 'g-0':'g-771'].describe().T['mean'].hist(bins=30)

dados.loc[:, 'g-0':'g-771'].describe().T['min'].hist(bins=30)

dados.loc[:, 'g-0':'g-771'].describe().T['max'].hist(bins=30)

dados.loc[:, 'c-0':'c-99'].describe().T['mean'].hist(bins=50)

sns.boxplot(x='g-0', data=dados)

plt.figure(figsize=(12,10))
sns.boxplot(y='g-0', x= 'tratamento', data=dados)

dados.head()

pd.crosstab([dados['dose'], dados['tempo']], dados['tratamento'], normalize= True)

pd.crosstab([dados['dose'], dados['tempo']], dados['tratamento'], normalize='index')

pd.crosstab([dados['dose'], dados['tempo']], dados['tratamento'], values=dados['g-0'], aggfunc='mean')

sns.scatterplot(x='g-0', y='g-3', data=dados)

dados[['g-0', 'g-3']]

sns.scatterplot(x='g-0', y='g-8', data=dados)

sns.lmplot(x='g-0', y='g-8', data=dados, line_kws={'color':'red'})

sns.lmplot(x='g-0', y='g-8', data=dados, line_kws={'color':'red'}, col='tratamento', row='tempo')

dados.loc[:, 'g-0': 'g-771'].corr()

from string import ascii_letters
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Compute the correlation matrix
corr = dados.loc[:, 'g-0': 'g-50'].corr()

# Generate a mask for the upper triangle
mask = np.triu(np.ones_like(corr, dtype=bool))

# Set up the matplotlib figure
f, ax = plt.subplots(figsize=(11, 9))

# Generate a custom diverging colormap
cmap = sns.diverging_palette(230, 20, as_cmap=True)

# Draw the heatmap with the mask and correct aspect ratio
sns.heatmap(corr, mask=mask, cmap=cmap,  center=0,
            square=True, linewidths=.5, cbar_kws={"shrink": .5})

from string import ascii_letters
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Compute the correlation matrix
corr_celular = dados.loc[:, 'c-0': 'c-50'].corr()

# Generate a mask for the upper triangle
mask = np.triu(np.ones_like(corr, dtype=bool))

# Set up the matplotlib figure
f, ax = plt.subplots(figsize=(11, 9))

# Generate a custom diverging colormap
cmap = sns.diverging_palette(230, 20, as_cmap=True)

# Draw the heatmap with the mask and correct aspect ratio
sns.heatmap(corr_celular, mask=mask, cmap=cmap,  center=0,
            square=True, linewidths=.5, cbar_kws={"shrink": .5})

dados_resultados = pd.read_csv('https://raw.githubusercontent.com/alura-cursos/imersaodados3/main/dados/dados_resultados.csv')
dados_resultados.head()

dados_resultados['acetylcholine_receptor_agonist'].unique()

contagem_moa = dados_resultados.select_dtypes('int64').sum()
contagem_moa

contagem_moa = dados_resultados.drop('id', axis=1).sum().sort_values(ascending=False)
contagem_moa

dados_resultados.sum()

dados_resultados.drop('id', axis=1).sum(axis=1)

dados_resultados['n_moa'] = dados_resultados.drop('id', axis=1).sum(axis=1)
dados_resultados.head()

dados_resultados['n_moa'] !=0

dados_resultados['ativo_moa'] = (dados_resultados['n_moa'] != 0)
dados_resultados.head()

dados_combinados = pd.merge(dados, dados_resultados[['id','n_moa', 'ativo_moa']], on='id')
dados_combinados.head()

dados_combinados.query('tratamento == "com_controle"')['ativo_moa'].value_counts()

dados_combinados.query('tratamento == "com_droga"')['ativo_moa'].value_counts()

composto_principal = dados_combinados['composto'].value_counts().index[:5]
plt.figure(figsize=(15,12))
sns.boxplot(data = dados_combinados.query('composto in @composto_principal'), y='g-0', x='composto', hue='ativo_moa')

dados_combinados.head()

from sklearn.model_selection import train_test_split

x_treino, x_teste, y_treino, y_teste = train_test_split(x, y, test_size = 0.2)

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

x = dados_combinados.select_dtypes('float64')
y = dados_combinados['ativo_moa']
x_treino, x_teste, y_treino, y_teste = train_test_split(x, y, test_size = 0.2, stratify= y , random_state=3333)

modelo_rlogistica = LogisticRegression(max_iter=1000)
modelo_rlogistica.fit(x_treino, y_treino)
modelo_rlogistica.score(x_teste, y_teste)

from sklearn.dummy import DummyClassifier
from sklearn.metrics import accuracy_score

modelo_dummy = DummyClassifier('most_frequent')
modelo_dummy.fit(x_treino, y_treino)
previsao_dummy = modelo_dummy.predict(x_teste)

accuracy_score(y_teste, previsao_dummy)

dados_combinados['ativo_moa'].value_counts(normalize=True)

from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

x = dados_combinados.select_dtypes('float64')
y = dados_combinados['ativo_moa']
x_treino, x_teste, y_treino, y_teste = train_test_split(x, y, test_size = 0.2, stratify=y , random_state=3333)

modelo_arvore = DecisionTreeClassifier(max_depth=3)
modelo_arvore.fit(x_treino, y_treino)
modelo_arvore.score(x_teste, y_teste)

from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

x = dados_combinados.select_dtypes('float64')
y = dados_combinados['ativo_moa']
x_treino, x_teste, y_treino, y_teste = train_test_split(x, y, test_size = 0.2, stratify=y , random_state=3333)
teste=[]
treino=[]
for i in range(1,15):
  modelo_arvore = DecisionTreeClassifier(max_depth=i)
  modelo_arvore.fit(x_treino, y_treino)
  treino.append(modelo_arvore.score(x_treino, y_treino))
  teste.append(modelo_arvore.score(x_teste, y_teste))

teste

treino

sns.lineplot(x=range(1,15), y =teste, label='teste')
sns.lineplot(x=range(1,15), y =treino, label='treino')

pd.get_dummies(dados_combinados['tratamento'])

pd.get_dummies(dados_combinados, columns=['tratamento', 'dose', 'tempo'])

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split


x = dados_combinados.drop(['id', 'n_moa','ativo_moa', 'composto'], axis=1)
x = pd.get_dummies(x, columns=['tratamento', 'dose', 'tempo'])
y = dados_combinados['ativo_moa']
x_treino, x_teste, y_treino, y_teste = train_test_split(x, y, test_size = 0.2, stratify=y , random_state=3333)

modelo_ramdom_forest = RandomForestClassifier()
modelo_ramdom_forest.fit(x_treino, y_treino)
modelo_ramdom_forest.score(x_teste, y_teste)

"""# **Aula 01**

###Desafio 01: Investigar poirque a classe tratamento é tão desbalanceada?

###Desafio 02: Plotar as 5 últimas linhas da tabela. 
R: dados.tail()

###Desafio 03: Proporção das classes tratamento.
dados['tempo'].value_counts().plot.pie()
dados['tratamento'].value_counts().plot.pie()
dados['tempo'].value_counts().plot.bar()

###Desafio 04: Quantos tipos de drogas foram investigados.
dados['droga'].nunique()

###Desafio 05: Procurar na documentação sobre query.

###Desafio 06: Renomear as colunas tirando o hífen

###Desafio 07: Deixar os gráficos bonitões (Matplotlib.pyplot)

###Desafio 08: Resumo do que você aprendeu com os dados

# **Aula 02**

###Desafio 01: Ordernar gráfico countplot

###Desafio 02: Melhorar estética alterando fonte, visualização, nome

###Desafio 03: Plotar os histogramas com searbon

###Desafio 04: Estudar sobre as estatisticas do describe

###Desafio 05: Refletir sobre a manipulação do tamanho das visualizações

###Desafio 06: Fazer outras análises com o boxplot e até com o histograma

###Desafio 07: Resumo do que você aprendeu com os dados

# **Aula 03**

###Desafio 01: Criar tabelas de frequência com pandas.groupby()

###Desafio 02: Normalizar o crosstab pela coluna

###Desafio 03: Explorar outros agregadores

###Desafio 04: Explorar o melt

###Desafio 05: Calcular e analsiar a correlação entre G e C

###Desafio 06: Estudar o código que plota a matriz de correlação(heatmap)

###Desafio 07: Resumo do que você aprendeu com os dados

# **Aula 04**

###Desafio 01: Encontrar top 10 das ações do MOA

###Desafio 02: Criar a coluna eh_controle para quando na linha tratamento == com_controle

###Desafio 03: Criar três colunas para indicar o tempo 24, 48, 72

###Desafio 04: Lerem sobre combinações de data frames

###Desafio 05: Fazer análise mais detalhada considerando tempo e dose, para comparar as distribuições (Escolher uma droga e comparar com controle)

###Desafio 06: Descobrir se tempo algum composto que depndendo da configuracao do experimento, ativa ou nao ativa algum MOA (ou um MOA diferente)

###Desafio 07: Descobrir se tempo algum composto que depndendo da configuracao do experimento, ativa moas diferentes

###Desafio 08: Resumo do que você aprendeu com os dados


# **Aula 05**

###Desafio 01: Tente outros modelos ou mude os parametros dos modelos que testamos em aula

###Desafio 02: Estude a documentação do sklearn

###Desafio 03: Pesquisar o fluxograma 'Escolhendo o melhor modelo'

###Desafio 04: Teste outros problemas (perguntas). 0, 1 ou +.

###Desafio 05: Escolha a droga mais utilizada e tente criar um modelo para prever está label

###Desafio 06: Resumo do que você aprendeu com os dados
"""