# -*- coding: utf-8 -*-
"""data-science-visualizacao-saude-e-medicina.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NQuNn6R9dfQnK7BFSvieYY23QDXgj5fL

# Primeira Parte
"""

import pandas as pd

confirmed = pd.read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
deaths = pd.read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")
recovered = pd.read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv")

confirmed.head()

last_date = "2/4/22"

confirmed[last_date]

confirmed['Country/Region']

confirmed.shape

confirmed['Country/Region'].value_counts()

confirmed.sample(10)

confirmed.iloc[0]

confirmed.set_index('Province/State').loc['Zhejiang']

confirmed_by_country = confirmed.groupby("Country/Region").sum()
confirmed_by_country.head()

confirmed_by_country.sample(15)

import matplotlib.pyplot as plt


plt.figure(figsize=(20,5))
confirmed_by_country.loc['China'][2:].plot()
plt.title('Casos confirmados em China')
plt.show()

import matplotlib.pyplot as plt


plt.figure(figsize=(20,5))
confirmed_by_country.loc['China'][2:350].plot()
plt.title('Casos confirmados em China')
plt.show()

new_cases_china = confirmed_by_country.loc["China"][2:60].diff()
new_cases_china

plt.figure(figsize=(30,20))
new_cases_china.plot()
plt.title('Diferença confirmados em China')
plt.show()

confirmed_by_country.head()

plt.figure(figsize=(20,15))
plt.title('Confirmados por país')
confirmed_by_country[last_date].plot(kind='pie')
plt.show()

plt.figure(figsize=(15,6))
plt.title('Confirmados por país')
confirmed_by_country[last_date].sort_values(ascending=False)[0:10].plot(kind='bar')
plt.show()

confirmed.groupby('Country/Region').sum()[last_date].head()

def latest_by_country(data):
    return data.groupby('Country/Region').sum().iloc[:, -3]

informations = [latest_by_country(confirmed),latest_by_country(deaths),latest_by_country(recovered)]
combined = pd.concat(informations,axis=1)
combined.columns = ['confirmed','deaths','recovered']
combined

sum_up = combined.sum()
letality_rate_1 = sum_up['deaths'] / sum_up['confirmed']
print(letality_rate_1 * 100)

letality_rate_1 = combined['deaths'] / combined['confirmed'] * 100
combined['letality_rate_1'] = letality_rate_1
combined.head()

letality_rate_2 = combined['deaths'] / (combined['recovered'] + combined['deaths'])
letality_rate_2
combined['letality_rate_2'] = letality_rate_2

combined.head()

combined.sort_values('letality_rate_1', ascending=False).head(10)

import seaborn as sns

sns.scatterplot(data=combined, x='confirmed', y='letality_rate_1')

sns.distplot(combined["letality_rate_1"], kde=False)

combined.sort_values('letality_rate_1', ascending=False).head(10)

def latest_by_country_at(data, date):
  return data.groupby("Country/Region").sum()[date]


informations = [latest_by_country_at(confirmed, '2/20/20'), latest_by_country_at(deaths, '2/20/20'), latest_by_country_at(recovered, '2/20/20')]
combined_2_20_20 = pd.concat(informations, axis=1)
combined_2_20_20.columns = ["confirmed", "deaths", "recovered"]

sum_up = combined_2_20_20.loc["China"]
letality_rate_1 = sum_up["deaths"] / sum_up["confirmed"]
letality_rate_2 = sum_up["deaths"] / (sum_up["deaths"] + sum_up["recovered"])
print(letality_rate_1 * 100)
print(letality_rate_2 * 100)

display(sum_up)

informations = [latest_by_country_at(confirmed, '2/8/20'), latest_by_country_at(deaths, '2/20/20'), latest_by_country_at(recovered, '2/20/20')]
combined_12 = pd.concat(informations, axis=1)
combined_12.columns = ["confirmed", "deaths", "recovered"]

sum_up = combined_12.loc["China"]
letality_rate_3 = sum_up["deaths"] / sum_up["confirmed"]
print(letality_rate_3 * 100)
display(sum_up)

letality_rate_1 = combined["deaths"] / combined["confirmed"] * 100
letality_rate_2 = combined["deaths"] / (combined["recovered"] + combined["deaths"]) * 100
combined["letality_rate_1"] = letality_rate_1
combined["letality_rate_2"] = letality_rate_2
combined.head()

combined.sort_values("letality_rate_1", ascending=False).head(10)



"""# Segunda Parte"""

confirmed

is_china = confirmed['Country/Region'] == 'China'
is_china

confirmed['is_china'] = is_china
confirmed.head()

confirmed.groupby('is_china').sum()['3/2/20'].plot(kind='bar')

import numpy as np

confirmed['is_china_label'] = np.where(confirmed['is_china'], 'China', 'Others')

display(confirmed.head())

summed = confirmed.groupby('is_china_label').sum()['3/2/20'].plot(kind='bar')
plt.title('Casos confirmados até 3/2/2020')
plt.show()

summed = confirmed.groupby('is_china_label').sum()
summed['delta'] = summed['3/2/20'] - summed['3/1/20']
summed['delta'].plot(kind='bar')
plt.title('Novos casos confirmados em 3/2/2020')
plt.show()

summed.T

summed.T[2:-2].plot()
plt.title("Desenvolvimento dos casos de COVID")
plt.show()

differences = summed.T[2:-2].diff().dropna()
differences.plot()
plt.title("Casos novos com decorrer do tempo")
plt.show()

cases = confirmed.groupby('is_china_label').sum()['3/2/20'].loc["China"]
estimated_population = 1437525528
incidence_ratio = cases / estimated_population * 100000
incidence_ratio

un_population = pd.read_csv("https://population.un.org/wpp/Download/Files/1_Indicators%20(Standard)/CSV_FILES/WPP2019_TotalPopulationBySex.csv")
un_population["PopTotal"] = un_population["PopTotal"]  * 1000
un_population.head()

un_population.describe()

un_population_total = un_population.query("Time==2019")[["Location","PopTotal"]].set_index("Location")
un_population_total.head()

combined.join(un_population_total)

combined.join(un_population_total).sort_values("confirmed", ascending=False).head(20)

un_population.query("Location.str.contains('China') and Time==2019", engine='python')

# vou assumir algumas premissas
# estou assumindo que na UN China = John Hokpins Mainland China

def rename_location(location):
  if location=='China':
    return 'Mainland China'
  if location=='Republic of Korea':
    return 'South Korea'
  if location=='Iran (Islamic Republic of)':
    return 'Iran'
  if location=='China, Hong Kong SAR':
    return 'Hong Kong'
  if location=='United States of America':
    return 'US'
  return location

un_population_total['location_for_who'] = un_population_total.index.map(rename_location)
un_population_total.query("location_for_who=='South Korea'").head()

un_population_total = un_population_total.set_index("location_for_who")
un_population_total.head()

combined_expanded = combined.join(un_population_total).sort_values("confirmed", ascending=False).dropna()
combined_expanded.head(10)

# O cálculo de incidencia aqui está errado, pois assumi que a população em risco de Mainland China é todo mundo
# mas até agora 83% dos casos estão em Hubei
# Durante esse momento da epidemia é injusto com a localização (Mainland China) considerar essa incidência.

combined_expanded['incidence_ratio'] = combined_expanded['confirmed'] / combined_expanded['PopTotal'] * 100000
combined_expanded['mortality_rate'] = combined_expanded['deaths'] / combined_expanded['PopTotal'] * 100000
combined_expanded.head(10)

confirmed.sort_values(last_date, ascending=False).head()

hubei_population = 59020000
confirmed_cases = confirmed.set_index("Province/State").loc["Hubei"][last_date]
death_cases = deaths.set_index("Province/State").loc["Hubei"][last_date]
recovered_cases = recovered.set_index("Province/State").loc["Hubei"][last_date]

letality_rate_1 = death_cases / confirmed_cases * 100
letality_rate_2 = death_cases / (death_cases + recovered_cases) * 100
print(f"Letality rate 1: {letality_rate_1}%")
print(f"Letality rate 2: {letality_rate_2}%")

# nos estados unidos de acordo com burden report de influenza 2018-2019 estimativa não final
letality_rate_hospitalization = 34157 / 490561 * 100

print(f"Letality rate hospitalização EUA influenza 2018-2019: {letality_rate_hospitalization}%")

# nos estados unidos de acordo com burden report de influenza 2018-2019 estimativa não final
letality_rate_medical_visit = 34157 / 16520350 * 100

print(f"Letality rate visita médica EUA influenza 2018-2019: {letality_rate_medical_visit}%")

# nos estados unidos de acordo com burden report de influenza 2018-2019 estimativa não final
letality_rate_symptomatic = 34157 / 35520883 * 100

print(f"Letality rate sintomáticos EUA influenza 2018-2019: {letality_rate_symptomatic}%")

incidence_ratio = confirmed_cases / hubei_population * 100000
mortality_rate = death_cases / hubei_population * 100000

print(f"Coeficiente de incidencia em Hubei {incidence_ratio}")
print(f"Coeficiente de mortalidade em Hubei {mortality_rate}")

# estados unidos, mesmo relatorio de burden, coeficiente de incidencia

incidence_ratio = 35520883 / 329450000 * 100000
mortality_rate = 34157 / 329450000 * 100000

print(f"Coeficiente de incidencia de influenza 2018-2019 em EUA  {incidence_ratio}")
print(f"Coeficiente de mortalidade de influenza 2018-2019 em EUA {mortality_rate}")

grouped_per_day = pd.DataFrame([confirmed.sum()[2:-1],recovered.sum()[2:], deaths.sum()[2:]],
            index=["confirmed", "recovered", "deaths"]).T
grouped_per_day.head()

grouped_per_day["letality_rate_1"] = grouped_per_day["deaths"]/ grouped_per_day["confirmed"] * 100
grouped_per_day["letality_rate_2"] = grouped_per_day["deaths"] / (grouped_per_day["deaths"] + grouped_per_day["recovered"]) * 100
grouped_per_day.head()

fig = plt.figure(figsize=(10,5))
grouped_per_day["letality_rate_1"].plot()
ax = grouped_per_day["letality_rate_2"].plot()
plt.legend(['Mortes por casos confirmados ("otimista")', 'Mortes por casos recuperados ou óbitos ("pessimista")'])
plt.title("Taxa de letalidade do COVID-19 (evolução acumulada)", pad=10)
plt.grid(linestyle='-')
ax.set_ylabel("letalidade %")
ax.set_xlabel("Fonte Johns Hopkins CSSE / Gráfico e Collab www.alura.com.br", labelpad=10)
plt.show()

grouped_per_day["letality_rate_2"].plot()
plt.title("Mortes por casos recuperados ou mortos no mundo todo")
plt.show()

grouped_per_day["letality_rate_1"].plot()
plt.title("Mortes por casos confirmados no mundo todo")
plt.show()

